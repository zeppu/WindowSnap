<Window x:Class="Overlay.Views.OverlayWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Overlay.Views"
        xmlns:viewModels="clr-namespace:Overlay.ViewModels"
        mc:Ignorable="d"
        Title="OverlayWindow" Height="100" Width="1087" Topmost="True" ShowActivated="False" IsVisibleChanged="OverlayWindow_OnIsVisibleChanged"
        d:DataContext="{d:DesignInstance viewModels:OverlayViewModel}" ResizeMode="NoResize" WindowStyle="None" BorderThickness="0"
        >
    <Window.Resources>
        <SolidColorBrush x:Key="Item.MouseOver.Background" Color="Red"/>
        <SolidColorBrush x:Key="Item.MouseOver.Border" Color="Red"/>
    </Window.Resources>
    <Grid>
        <Grid.Resources>

        </Grid.Resources>
        <ListBox ItemsSource="{Binding Path=Areas}" HorizontalAlignment="Left" HorizontalContentAlignment="Center"  >
            <!-- 
            The template below alters the way a listbox is displayed.  By default, a listbox is visually described as a border 
            with a scrollviewer hosting an items presenter (an indicator where the items will be rendered).  
            By overriding this and replacing the template with a simpler variant (we only want to display the areas 
            defined in the view model after all) we get rid of any 
            scrolling functionality.            
            -->
            <ListBox.Template>
                <ControlTemplate>
                    <ItemsPresenter></ItemsPresenter>
                </ControlTemplate>
            </ListBox.Template>
            <!-- 
            ItemsPanel tells the listbox control what to use to host the ListBoxItems
            -->
            <ListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel CanHorizontallyScroll="False" CanVerticallyScroll="False" Orientation="Horizontal" HorizontalAlignment="Left" Background="Purple"></StackPanel>
                </ItemsPanelTemplate>
            </ListBox.ItemsPanel>
            <!-- Template defining the content of a listbox item-->
            <ListBox.ItemTemplate>
                <DataTemplate DataType="viewModels:AreaViewModel">
                    <Border Padding="0">
                        <TextBlock Text="{Binding Path=Name}">

                        </TextBlock>
                    </Border>
                </DataTemplate>
            </ListBox.ItemTemplate>
            <ListBox.ItemContainerStyle>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Width" Value="{Binding Path=Width}"></Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="True"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                                    </MultiTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ListBox.ItemContainerStyle>
        </ListBox>

    </Grid>
</Window>
